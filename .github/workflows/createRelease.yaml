name: Windows CI & Release

on:
  push:
    branches: [ master ]
    tags:    [ 'v*.*.*' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.13'
  DIST_DIR: 'dist'

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Upgrade pip & install pybind11
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install pybind11

    # vcpkg cache based on the official MS docs (cache the downloads and built packages)
    - name: Restore vcpkg cache
      uses: actions/cache@v4
      with:
        path: |
          ${{ runner.temp }}/vcpkg
          ${{ runner.temp }}/vcpkg_installed
          C:\Users\runneradmin\AppData\Local\vcpkg\archives
        key: vcpkg-windows-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}

    - name: Bootstrap vcpkg
      shell: powershell
      run: |
        if (-not (Test-Path "${{ runner.temp }}/vcpkg")) {
          git clone https://github.com/microsoft/vcpkg.git "${{ runner.temp }}/vcpkg"
        }
        & "${{ runner.temp }}/vcpkg/bootstrap-vcpkg.bat" -disableMetrics

    - name: Update vcpkg ports
      shell: cmd
      run: |
        cd "${{ runner.temp }}\vcpkg"
        git pull

    # Retry logic for rate-limited downloads
    - name: Install C++ deps via vcpkg (retry on 429)
      shell: cmd
      run: |
        for /L %%i in (1,1,3) do (
            "${{ runner.temp }}\vcpkg\vcpkg" install spdlog fmt ffmpeg --triplet x64-windows --recurse && exit /b 0
            timeout /t 30
        )
        exit /b 1

    - name: Download LibTorch (Release)
      shell: powershell
      run: |
        $ErrorActionPreference = "Stop"
        $url = 'https://download.pytorch.org/libtorch/cu118/libtorch-win-shared-with-deps-2.7.1%2Bcu118.zip'
        $retries = 5
        $success = $false
        for ($i = 1; $i -le $retries; $i++) {
          try {
            Invoke-WebRequest $url -OutFile libtorch.zip
            $success = $true
            break
          } catch {
            Write-Host "Download failed (attempt $i/$retries), retrying in 10 seconds..."
            Start-Sleep -Seconds 10
          }
        }
        if (-not $success) {
          throw "Failed to download LibTorch after $retries attempts."
        }
        Expand-Archive libtorch.zip -DestinationPath libtorch

    - name: Configure CMake (Release)
      shell: cmd
      run: |
        cmake -S . -B out\build\Release -G Ninja ^
          -DCMAKE_TOOLCHAIN_FILE="${{ runner.temp }}\vcpkg\scripts\buildsystems\vcpkg.cmake" ^
          -DTorch_DIR=%CD%\libtorch\share\cmake\Torch ^
          -DCMAKE_BUILD_TYPE=Release ^
          -DCELUX_BUILD_PYTHON=ON ^
          -DPython3_EXECUTABLE="${{ env.pythonLocation }}\python.exe" ^
          -DPython3_ROOT_DIR="${{ env.pythonLocation }}"

    - name: Build all (Release)
      shell: cmd
      run: cmake --build out\build\Release --config Release

    - name: Build Windows wheel
      shell: cmd
      run: |
        python -m pip wheel . --no-deps -w dist

    - name: List dist folder
      shell: cmd
      run: dir dist

    - name: Upload Windows wheel
      uses: actions/upload-artifact@v4
      with:
        name: windows-wheel-Release
        path: dist\*.whl

  release:
    needs: build-windows
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download Windows wheels
      uses: actions/download-artifact@v4
      with:
        name: windows-wheel-Release
        path: dist

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag:   ${{ github.ref_name }}
        name:  Release ${{ github.ref_name }}
        body:  Automated Windows CI build & wheel
        artifacts: |
          dist/*.whl

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@v1.4.2
      with:
        user:     __token__
        password: ${{ secrets.PYPI_TOKEN }}
        skip_existing: true
        packages_dir:  dist
