name: Windows CI & Release

on:
  push:
    branches: [ master ]
    tags:    [ 'v*.*.*' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.13'
  DIST_DIR: 'dist'

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Upgrade pip & install deps
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install pybind11 torch

    - name: Restore vcpkg cache
      uses: actions/cache@v4
      with:
        path: |
          ${{ runner.temp }}/vcpkg
          ${{ runner.temp }}/vcpkg_installed
          C:\Users\runneradmin\AppData\Local\vcpkg\archives
        key: vcpkg-windows-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}

    - name: Bootstrap vcpkg
      shell: powershell
      run: |
        if (-not (Test-Path "${{ runner.temp }}/vcpkg")) {
          git clone https://github.com/microsoft/vcpkg.git "${{ runner.temp }}/vcpkg"
        }
        & "${{ runner.temp }}/vcpkg/bootstrap-vcpkg.bat" -disableMetrics

    - name: Update vcpkg ports
      shell: cmd
      run: |
        cd "${{ runner.temp }}\vcpkg"
        git pull

    # Retry logic for rate-limited downloads
    - name: Install C++ deps via vcpkg (retry on 429)
      shell: cmd
      run: |
        for /L %%i in (1,1,3) do (
            "${{ runner.temp }}\vcpkg\vcpkg" install spdlog fmt ffmpeg --triplet x64-windows --recurse && exit /b 0
            timeout /t 30
        )
        exit /b 1
        
    - name: Set PYTHON_LOCATION env
      run: echo "PYTHON_LOCATION=${{ env.pythonLocation }}" >> $GITHUB_ENV
      shell: bash

    - name: Configure CMake (Release)
      shell: cmd
      run: |
        cmake -S . -B out\build\Release -G "Visual Studio 17 2022" -A x64 ^
          -DCMAKE_BUILD_TYPE=Release ^
          -DCMAKE_TOOLCHAIN_FILE="%RUNNER_TEMP%\vcpkg\scripts\buildsystems\vcpkg.cmake" ^
          -DCELUX_BUILD_PYTHON=ON ^
          -DPython3_EXECUTABLE="%PYTHON_LOCATION%\python.exe" ^
          -DPython3_ROOT_DIR="%PYTHON_LOCATION%"

    - name: Build all (Release)
      shell: cmd
      run: cmake --build out\build\Release --config Release

    - name: Build Windows wheel
      shell: cmd
      run: |
        python -m pip wheel . --no-deps -w dist

    - name: List dist folder
      shell: cmd
      run: dir dist

    - name: Upload Windows wheel
      uses: actions/upload-artifact@v4
      with:
        name: windows-wheel-Release
        path: dist\*.whl

 
  release:
    needs: build-windows
    runs-on: windows-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Download Windows wheels
        uses: actions/download-artifact@v4
        with:
          name: windows-wheel-Release
          path: dist
  
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Extract version from pyproject.toml
        id: get_version
        shell: bash
        run: |
          VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=version::$VERSION"
  
      - name: Create tag for this version
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git tag v${{ env.VERSION }}
          git push origin v${{ env.VERSION }}
  
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag:   v${{ env.VERSION }}
          name:  Release v${{ env.VERSION }}
          body:  Automated Windows CI build & wheel
          artifacts: |
            dist/*.whl
