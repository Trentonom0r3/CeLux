name: Windows & Linux CI Release

permissions:
  contents: write

on:
  push:
    branches: [ master ]
    tags:    [ 'v*.*.*' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.13'
  DIST_DIR: 'dist'
  VCPKG_LIBRARY_LINKAGE: dynamic

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Upgrade pip & install deps
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install pybind11 torch

    - name: Restore vcpkg cache
      uses: actions/cache@v4
      with:
        path: |
          ${{ runner.temp }}/vcpkg
          ${{ runner.temp }}/vcpkg_installed
          C:\Users\runneradmin\AppData\Local\vcpkg\archives
        key: vcpkg-windows-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}

    - name: Bootstrap vcpkg
      shell: powershell
      run: |
        if (-not (Test-Path "${{ runner.temp }}/vcpkg")) {
          git clone https://github.com/microsoft/vcpkg.git "${{ runner.temp }}/vcpkg"
        }
        & "${{ runner.temp }}/vcpkg/bootstrap-vcpkg.bat" -disableMetrics

    - name: Update vcpkg ports
      shell: cmd
      run: |
        cd "${{ runner.temp }}\vcpkg"
        git pull

    - name: Set VCPKG env vars
      shell: bash
      run: |
        echo "VCPKG_ROOT=${RUNNER_TEMP}/vcpkg"                          >> $GITHUB_ENV
        echo "VCPKG_TOOLCHAIN_FILE=${RUNNER_TEMP}/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV
        echo "VCPKG_TARGET_TRIPLET=x64-windows"                        >> $GITHUB_ENV

        # mirror your Linux CMAKE_PREFIX_PATH / MODULE_PATH so FFmpeg etc are found
        echo "CMAKE_PREFIX_PATH=${RUNNER_TEMP}/vcpkg/installed/x64-windows"                       >> $GITHUB_ENV
        echo "CMAKE_MODULE_PATH=${RUNNER_TEMP}/vcpkg/installed/x64-windows/share/ffmpeg"          >> $GITHUB_ENV

        
    - name: Install C++ deps via vcpkg (retry on 429)
      shell: cmd
      run: |
        for /L %%i in (1,1,3) do (
            "${{ runner.temp }}\vcpkg\vcpkg" install spdlog fmt ffmpeg[avcodec,avdevice,avfilter,avformat,core,swresample,swscale,x264,x265] --triplet x64-windows --recurse && exit /b 0
            timeout /t 30
        )
        exit /b 1
        
    - name: Set PYTHON_LOCATION env
      run: echo "PYTHON_LOCATION=${{ env.pythonLocation }}" >> $GITHUB_ENV
      shell: bash

    - name: Configure CMake (Release)
      shell: cmd
      run: |
        cmake -S . -B out\build\Release -G "Visual Studio 17 2022" -A x64 ^
          -DCMAKE_BUILD_TYPE=Release ^
          -DCMAKE_TOOLCHAIN_FILE="%RUNNER_TEMP%\vcpkg\scripts\buildsystems\vcpkg.cmake" ^
          -DCELUX_BUILD_PYTHON=ON ^
          -DPython3_EXECUTABLE="%PYTHON_LOCATION%\python.exe" ^
          -DPython3_ROOT_DIR="%PYTHON_LOCATION%"

    - name: Build all (Release)
      shell: cmd
      run: cmake --build out\build\Release --config Release

    - name: Build Windows wheel
      shell: bash
      env:
        VCPKG_ROOT:            ${{ runner.temp }}/vcpkg
        VCPKG_TOOLCHAIN_FILE:  ${{ runner.temp }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        VCPKG_TARGET_TRIPLET:  x64-windows

        CMAKE_ARGS: >-
          -DCMAKE_TOOLCHAIN_FILE=D:/a/_temp/vcpkg/scripts/buildsystems/vcpkg.cmake
          -DVCPKG_TARGET_TRIPLET=x64-windows
          -DCMAKE_PREFIX_PATH=D:/a/_temp/vcpkg/installed/x64-windows
          -DCMAKE_MODULE_PATH=D:/a/_temp/vcpkg/installed/x64-windows/share/ffmpeg

      run: python -m pip wheel . --no-deps -w dist -v

    - name: List dist folder
      shell: cmd
      run: dir dist

    - name: Upload Windows wheel
      uses: actions/upload-artifact@v4
      with:
        name: windows-wheel-Release
        path: '**/dist/*.whl'
        
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build & repair wheel in manylinux2014 container
        run: |
          docker run --rm \
            -v "${{ github.workspace }}":/io \
            -w /io \
            quay.io/pypa/manylinux2014_x86_64 \
            bash -l -c "\
              # 1) Use the CPython 3.13 already in the manylinux image
              export PATH=/opt/python/cp313-cp313/bin:\$PATH && \
              ln -sf /opt/python/cp313-cp313/bin/python3 /usr/bin/python3 && \
              \
              # 2) Install system deps (zip/unzip/tar for vcpkg) \
              yum install -y which git gcc gcc-c++ make nasm curl zip unzip tar && \
              \
              # 3) Bootstrap & install your C++ libs via vcpkg \
              git clone https://github.com/microsoft/vcpkg.git /io/vcpkg && \
              /io/vcpkg/bootstrap-vcpkg.sh -disableMetrics && \
              /io/vcpkg/vcpkg install \
                spdlog fmt \
                ffmpeg[avcodec,avdevice,avfilter,avformat,core,swresample,swscale,x264,x265] \
                --triplet x64-linux-dynamic --recurse && \
              \
              # 4) Configure & build your project \
              mkdir build && cd build && \
              cmake .. \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_TOOLCHAIN_FILE=/io/vcpkg/scripts/buildsystems/vcpkg.cmake \
                -DCELUX_BUILD_PYTHON=ON \
                -DPython3_EXECUTABLE=$(which python3) \
                -DPython3_ROOT_DIR=$(dirname $(dirname $(which python3))) && \
              cmake --build . --config Release && \
              \
              # 5) Wheel & repair it to manylinux2014 \
              python3 -m pip wheel /io -w /io/wheelhouse && \
              pip install auditwheel && \
              auditwheel repair /io/wheelhouse/*.whl -w /io/dist"

      - name: Upload Linux wheel
        uses: actions/upload-artifact@v4
        with:
          name: linux-wheel-Release
          path: dist/*.whl



  release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Windows wheels
        uses: actions/download-artifact@v4
        with:
          name: windows-wheel-Release
          path: dist

      - name: Download Linux wheels
        uses: actions/download-artifact@v4
        with:
          name: linux-wheel-Release
          path: dist

      - name: List all files for debug
        run: ls -lR dist

      - name: Install tomllib (if needed)
        run: python3 -m pip install toml 

      - name: Extract version from pyproject.toml
        id: get_version
        shell: bash
        run: |
          VERSION=$(python3 -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create tag for this version
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git tag v${{ env.VERSION }}
          git push origin v${{ env.VERSION }}

      - name: Flatten wheel artifacts to top-level dist/
        run: |
          find dist -name '*.whl' -exec mv {} dist/ \;

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag:   v${{ env.VERSION }}
          name:  Release v${{ env.VERSION }}
          body:  Automated CI build & wheel
          artifacts: 'dist/*.whl'


  pypi-publish:
    needs: release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Download Wheels
        uses: actions/download-artifact@v4
        with:
          name: linux-wheel-Release
          path: dist
      - name: Download Windows Wheels
        uses: actions/download-artifact@v4
        with:
          name: windows-wheel-Release
          path: dist
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          skip_existing: true
          packages_dir: dist/dist
