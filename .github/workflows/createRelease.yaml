name: Windows & Linux CI Release

permissions:
  contents: write

on:
  push:
    branches: [ master ]
    tags:    [ 'v*.*.*' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.13'
  DIST_DIR: 'dist'
  VCPKG_LIBRARY_LINKAGE: dynamic

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      SKBUILD_CONFIG: Release
      VCPKG_TARGET_TRIPLET: x64-windows
    steps:
    - name: Purge vcpkg to force clean build (avoid old DLLs)
      shell: cmd
      run: |
        if exist "%RUNNER_TEMP%\vcpkg" rmdir /s /q "%RUNNER_TEMP%\vcpkg"
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Upgrade pip & install deps
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install pybind11 torch numpy
    - name: Cache vcpkg build & installs
      uses: actions/cache@v4
      with:
        path: |
          ${{ runner.temp }}/vcpkg
          ${{ runner.temp }}/vcpkg/installed
          ${{ runner.temp }}/vcpkg/archives
        key: vcpkg-${{ runner.os }}-${{ env.VCPKG_TARGET_TRIPLET }}-${{ hashFiles('vcpkg.json','vcpkg-lock.json') }}
        restore-keys: |
          vcpkg-${{ runner.os }}-${{ env.VCPKG_TARGET_TRIPLET }}-
    - name: Bootstrap vcpkg
      shell: powershell
      run: |
        if (-not (Test-Path "${{ runner.temp }}/vcpkg")) {
          git clone https://github.com/microsoft/vcpkg.git "${{ runner.temp }}/vcpkg"
        }
        & "${{ runner.temp }}/vcpkg/bootstrap-vcpkg.bat" -disableMetrics
    - name: Update vcpkg ports
      shell: cmd
      run: |
        cd "${{ runner.temp }}\vcpkg"
        git pull
    - name: Set VCPKG env vars
      shell: bash
      run: |
        echo "VCPKG_ROOT=${RUNNER_TEMP}/vcpkg"                          >> $GITHUB_ENV
        echo "VCPKG_TOOLCHAIN_FILE=${RUNNER_TEMP}/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV
        echo "VCPKG_TARGET_TRIPLET=x64-windows"                        >> $GITHUB_ENV
        echo "CMAKE_PREFIX_PATH=${RUNNER_TEMP}/vcpkg/installed/x64-windows"                       >> $GITHUB_ENV
        echo "CMAKE_MODULE_PATH=${RUNNER_TEMP}/vcpkg/installed/x64-windows/share/ffmpeg"          >> $GITHUB_ENV
    - name: Install C++ deps via vcpkg (retry on 429)
      shell: cmd
      run: |
        for /L %%i in (1,1,3) do (
            "${{ runner.temp }}\vcpkg\vcpkg" install spdlog fmt ffmpeg[avcodec,avdevice,avfilter,avformat,core,swresample,swscale,x264,x265] --triplet x64-windows --recurse && exit /b 0
            timeout /t 30
        )
        exit /b 1
    - name: Save vcpkg cache
      if: always()
      uses: actions/cache@v4
      with:
        path: |
          ${{ runner.temp }}/vcpkg
          ${{ runner.temp }}/vcpkg/installed
          ${{ runner.temp }}/vcpkg/archives
        key: vcpkg-${{ runner.os }}-${{ env.VCPKG_TARGET_TRIPLET }}-${{ hashFiles('vcpkg.json','vcpkg-lock.json') }}
        restore-keys: |
          vcpkg-${{ runner.os }}-${{ env.VCPKG_TARGET_TRIPLET }}-
    - name: Set PYTHON_LOCATION env
      run: echo "PYTHON_LOCATION=${{ env.pythonLocation }}" >> $GITHUB_ENV
      shell: bash
    - name: Build Windows wheel
      shell: bash
      env:
        SKBUILD_GENERATOR: Ninja
        SKBUILD_CONFIG: Release
        VCPKG_ROOT:            ${{ runner.temp }}/vcpkg
        VCPKG_TOOLCHAIN_FILE:  ${{ runner.temp }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        VCPKG_TARGET_TRIPLET:  x64-windows
        CMAKE_ARGS: >-
          -DCMAKE_TOOLCHAIN_FILE=D:/a/_temp/vcpkg/scripts/buildsystems/vcpkg.cmake
          -DVCPKG_TARGET_TRIPLET=x64-windows
          -DCMAKE_PREFIX_PATH=D:/a/_temp/vcpkg/installed/x64-windows
          -DCMAKE_MODULE_PATH=D:/a/_temp/vcpkg/installed/x64-windows/share/ffmpeg
      run: python -m pip wheel . --no-deps -w dist -v
    - name: Smoke-test wheel in current env
      shell: bash
      run: |
        python -m pip install --upgrade --force-reinstall dist/*.whl
        python -c "import torch, celux; print(f'torch {torch.__version__}, celux {celux.__version__}')"
    - name: List final wheel contents
      run: unzip -l dist/*.whl | grep celux/
    - name: List dist folder
      shell: cmd
      run: dir dist
    - name: Upload Windows wheel
      uses: actions/upload-artifact@v4
      with:
        name: windows-wheel-Release
        path: '**/dist/*.whl'

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python (host only, cibuildwheel uses Docker for Linux)
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.20.0

      - name: Build Linux wheel (manylinux)
        env:
          CIBW_BUILD: "cp313-manylinux*_x86_64"
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_MANYLINUX_X86_64_IMAGE: "manylinux_2_28"
          CIBW_ENVIRONMENT_LINUX: >-
            SKBUILD_CONFIG=Release
            SKBUILD_GENERATOR=Ninja
            VCPKG_TARGET_TRIPLET=x64-linux-dynamic
            VCPKG_TOOLCHAIN_FILE=/opt/vcpkg/scripts/buildsystems/vcpkg.cmake
            VCPKG_FORCE_SYSTEM_BINARIES=1
            CC=gcc
            CXX=g++
            CMAKE_ARGS="-DCMAKE_TOOLCHAIN_FILE=/opt/vcpkg/scripts/buildsystems/vcpkg.cmake
                        -DVCPKG_TARGET_TRIPLET=x64-linux-dynamic
                        -DCMAKE_PREFIX_PATH=/opt/vcpkg/installed/x64-linux-dynamic
                        -DCMAKE_MODULE_PATH=/opt/vcpkg/installed/x64-linux-dynamic/share/ffmpeg"

          CIBW_BEFORE_ALL_LINUX: |
            (command -v dnf >/dev/null 2>&1 && dnf -y install \
               git pkgconf nasm zip unzip curl tar \
               gcc gcc-c++ make ninja-build cmake || \
             command -v yum >/dev/null 2>&1 && yum -y install \
               git pkgconf nasm zip unzip curl tar \
               gcc gcc-c++ make ninja-build cmake)
            git clone https://github.com/microsoft/vcpkg /opt/vcpkg
            /opt/vcpkg/bootstrap-vcpkg.sh -disableMetrics
            /opt/vcpkg/vcpkg install spdlog fmt ffmpeg[avcodec,avdevice,avfilter,avformat,core,swresample,swscale,x264,x265] --triplet x64-linux-dynamic --recurse

          CIBW_BEFORE_BUILD_LINUX: |
            python -m pip install -U pip wheel setuptools
            python -m pip install --only-binary=:all: "pybind11>=2.11"
            python -m pip install --only-binary=:all: torch || python -m pip install --only-binary=:all: --index-url https://download.pytorch.org/whl/cpu torch

          CIBW_REPAIR_WHEEL_COMMAND_LINUX: |
            TORCH_LIBDIR=$(python -c "import os, torch; print(os.path.join(os.path.dirname(torch.__file__), 'lib'))")
            FFMPEG_LIBDIR=/opt/vcpkg/installed/x64-linux-dynamic/lib
            echo "auditwheel will search TORCH_LIBDIR=$TORCH_LIBDIR"
            echo "auditwheel will search FFMPEG_LIBDIR=$FFMPEG_LIBDIR"
            LD_LIBRARY_PATH="$TORCH_LIBDIR:$FFMPEG_LIBDIR:$LD_LIBRARY_PATH" auditwheel repair -w {dest_dir} {wheel}

          CIBW_TEST_REQUIRES: "torch"
          CIBW_TEST_COMMAND: >
            python -c "import celux, torch; print('celux', celux.__version__, 'torch', torch.__version__)"
          CIBW_OUTPUT_DIR: dist
        run: python -m cibuildwheel --platform linux

      - name: List dist folder
        run: ls -l dist
  
      - name: Upload Linux wheel
        uses: actions/upload-artifact@v4
        with:
          name: linux-wheel-Release
          path: 'dist/*.whl'

  release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download Windows wheels
        uses: actions/download-artifact@v4
        with:
          name: windows-wheel-Release
          path: dist
      - name: Download Linux wheels
        uses: actions/download-artifact@v4
        with:
          name: linux-wheel-Release
          path: dist
      - name: List all files for debug
        run: ls -lR dist
      - name: Install tomllib (if needed)
        run: python3 -m pip install toml pybind11
      - name: Extract version from pyproject.toml
        id: get_version
        shell: bash
        run: |
          VERSION=$(python3 -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Create tag for this version
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git tag v${{ env.VERSION }}
          git push origin v${{ env.VERSION }}
      - name: Flatten wheel artifacts to top-level dist/
        run: |
          find dist -name '*.whl' -exec mv {} dist/ \;
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag:   v${{ env.VERSION }}
          name:  Release v${{ env.VERSION }}
          body:  Automated CI build & wheel
          artifacts: 'dist/*.whl'

  pypi-publish:
    needs: release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Download Wheels
        uses: actions/download-artifact@v4
        with:
          name: linux-wheel-Release
          path: dist
      - name: Download Windows Wheels
        uses: actions/download-artifact@v4
        with:
          name: windows-wheel-Release
          path: dist
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          skip_existing: true
          packages_dir: dist
