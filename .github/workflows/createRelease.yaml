name: Windows CI & Release

on:
  push:
    branches: [ master ]
    tags:    [ 'v*.*.*' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.13'                   # version for your Python extension
  VCPKG_ROOT:     '${{ runner.temp }}/vcpkg'
  BUILD_DIR:      'out\\build\\${{ matrix.config }}'
  DIST_DIR:       'dist'

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        config: [Debug, Release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Upgrade pip & install pybind11
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install pybind11

    - name: Bootstrap vcpkg
      shell: powershell
      run: |
        git clone https://github.com/microsoft/vcpkg.git $Env:VCPKG_ROOT
        & $Env:VCPKG_ROOT\bootstrap-vcpkg.bat -disableMetrics

    - name: Install C++ deps via vcpkg
      shell: cmd
      run: |
        %VCPKG_ROOT%\vcpkg install spdlog fmt ffmpeg --triplet x64-windows --recurse

    - name: Download LibTorch (${{ matrix.config }})
      shell: powershell
      run: |
        $url = if ('${{ matrix.config }}' -eq 'Debug') {
          'https://download.pytorch.org/libtorch/cu118/libtorch-win-shared-with-deps-debug-2.7.1%2Bcu118.zip'
        } else {
          'https://download.pytorch.org/libtorch/cu118/libtorch-win-shared-with-deps-2.7.1%2Bcu118.zip'
        }
        Invoke-WebRequest $url -OutFile libtorch.zip
        Expand-Archive libtorch.zip -DestinationPath libtorch

    - name: Configure CMake
      shell: cmd
      run: |
        cmake -S . -B %BUILD_DIR% -G Ninja ^
          -DCMAKE_TOOLCHAIN_FILE=%VCPKG_ROOT%\scripts\buildsystems\vcpkg.cmake ^
          -DTorch_DIR=%CD%\libtorch\share\cmake\Torch ^
          -DCMAKE_BUILD_TYPE=${{ matrix.config }} ^
          -DCELUX_BUILD_PYTHON=ON

    - name: Build all
      shell: cmd
      run: cmake --build %BUILD_DIR% --config ${{ matrix.config }}

    - name: Build Windows wheel
      shell: cmd
      run: |
        python -m pip wheel . --no-deps -w %DIST_DIR%

    - name: List dist folder
      shell: cmd
      run: dir %DIST_DIR%

    - name: Upload Windows wheel
      uses: actions/upload-artifact@v3
      with:
        name: windows-wheel-${{ matrix.config }}
        path: ${{ env.DIST_DIR }}\*.whl

  release:
    needs: build-windows
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download Windows wheels
      uses: actions/download-artifact@v3
      with:
        name: windows-wheel-Release
        path: dist

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag:   ${{ github.ref_name }}
        name:  Release ${{ github.ref_name }}
        body:  Automated Windows CI build & wheel
        artifacts: |
          dist/*.whl

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@v1.4.2
      with:
        user:     __token__
        password: ${{ secrets.PYPI_TOKEN }}
        skip_existing: true
        packages_dir:  dist
