name: Windows & Linux CI Release

permissions:
  contents: write

on:
  push:
    branches: [ master ]
    tags:    [ 'v*.*.*' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.13'
  DIST_DIR: 'dist'
  VCPKG_LIBRARY_LINKAGE: dynamic

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      SKBUILD_CONFIG: Release
      VCPKG_TARGET_TRIPLET: x64-windows       # ← define this here so cache key sees it
    steps:
    - name: Purge vcpkg to force clean build (avoid old DLLs)
      shell: cmd
      run: |
        if exist "%RUNNER_TEMP%\vcpkg" rmdir /s /q "%RUNNER_TEMP%\vcpkg"

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Upgrade pip & install deps
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install pybind11 torch numpy

    - name: Cache vcpkg build & installs
      uses: actions/cache@v4
      with:
        path: |
          ${{ runner.temp }}/vcpkg
          ${{ runner.temp }}/vcpkg/installed
          ${{ runner.temp }}/vcpkg/archives
        key: vcpkg-${{ runner.os }}-${{ env.VCPKG_TARGET_TRIPLET }}-${{ hashFiles('vcpkg.json','vcpkg-lock.json') }}
        restore-keys: |
          vcpkg-${{ runner.os }}-${{ env.VCPKG_TARGET_TRIPLET }}-

    - name: Bootstrap vcpkg
      shell: powershell
      run: |
        if (-not (Test-Path "${{ runner.temp }}/vcpkg")) {
          git clone https://github.com/microsoft/vcpkg.git "${{ runner.temp }}/vcpkg"
        }
        & "${{ runner.temp }}/vcpkg/bootstrap-vcpkg.bat" -disableMetrics

    - name: Update vcpkg ports
      shell: cmd
      run: |
        cd "${{ runner.temp }}\vcpkg"
        git pull

    - name: Set VCPKG env vars
      shell: bash
      run: |
        echo "VCPKG_ROOT=${RUNNER_TEMP}/vcpkg"                          >> $GITHUB_ENV
        echo "VCPKG_TOOLCHAIN_FILE=${RUNNER_TEMP}/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV
        echo "VCPKG_TARGET_TRIPLET=x64-windows"                        >> $GITHUB_ENV

        # mirror your Linux CMAKE_PREFIX_PATH / MODULE_PATH so FFmpeg etc are found
        echo "CMAKE_PREFIX_PATH=${RUNNER_TEMP}/vcpkg/installed/x64-windows"                       >> $GITHUB_ENV
        echo "CMAKE_MODULE_PATH=${RUNNER_TEMP}/vcpkg/installed/x64-windows/share/ffmpeg"          >> $GITHUB_ENV

        
    - name: Install C++ deps via vcpkg (retry on 429)
      shell: cmd
      run: |
        for /L %%i in (1,1,3) do (
            "${{ runner.temp }}\vcpkg\vcpkg" install spdlog fmt ffmpeg[avcodec,avdevice,avfilter,avformat,core,swresample,swscale,x264,x265] --triplet x64-windows --recurse && exit /b 0
            timeout /t 30
        )
        exit /b 1
        
    - name: Save vcpkg cache
      if: always()
      uses: actions/cache@v4
      with:
        path: |
          ${{ runner.temp }}/vcpkg
          ${{ runner.temp }}/vcpkg/installed
          ${{ runner.temp }}/vcpkg/archives
        key: vcpkg-${{ runner.os }}-${{ env.VCPKG_TARGET_TRIPLET }}-${{ hashFiles('vcpkg.json','vcpkg-lock.json') }}
        restore-keys: |
          vcpkg-${{ runner.os }}-${{ env.VCPKG_TARGET_TRIPLET }}-

    - name: Set PYTHON_LOCATION env
      run: echo "PYTHON_LOCATION=${{ env.pythonLocation }}" >> $GITHUB_ENV
      shell: bash


    - name: Build Windows wheel
      shell: bash
      env:
        SKBUILD_GENERATOR: Ninja
        SKBUILD_CONFIG: Release

        VCPKG_ROOT:            ${{ runner.temp }}/vcpkg
        VCPKG_TOOLCHAIN_FILE:  ${{ runner.temp }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        VCPKG_TARGET_TRIPLET:  x64-windows
    
        CMAKE_ARGS: >-
          -DCMAKE_TOOLCHAIN_FILE=D:/a/_temp/vcpkg/scripts/buildsystems/vcpkg.cmake
          -DVCPKG_TARGET_TRIPLET=x64-windows
          -DCMAKE_PREFIX_PATH=D:/a/_temp/vcpkg/installed/x64-windows
          -DCMAKE_MODULE_PATH=D:/a/_temp/vcpkg/installed/x64-windows/share/ffmpeg
    
      run: python -m pip wheel . --no-deps -w dist -v

    - name: Smoke-test wheel in current env
      shell: bash
      run: |
        # reinstall into the same env (which already has torch)
        python -m pip install --upgrade --force-reinstall dist/*.whl

        # quick import check
        python -c "import torch, celux; print(f'torch {torch.__version__}, celux {celux.__version__}')"

    - name: List final wheel contents
      run: unzip -l dist/*.whl | grep celux/
      
    - name: List dist folder
      shell: cmd
      run: dir dist

    - name: Upload Windows wheel
      uses: actions/upload-artifact@v4
      with:
        name: windows-wheel-Release
        path: '**/dist/*.whl'
  
  build-linux:
    runs-on: ubuntu-latest
    env:
      SKBUILD_CONFIG: Release
      VCPKG_TARGET_TRIPLET: x64-linux-dynamic 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install build essentials
        run: sudo apt-get update && sudo apt-get install -y nasm

      - name: Purge vcpkg to force clean shared build
        run: rm -rf ${{ runner.temp }}/vcpkg

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Upgrade pip & install deps
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install pybind11 torch numpy

      - name: Cache vcpkg build & installs
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.temp }}/vcpkg
            ${{ runner.temp }}/vcpkg/installed
            ${{ runner.temp }}/vcpkg/archives
          key: vcpkg-${{ runner.os }}-${{ env.VCPKG_TARGET_TRIPLET }}-${{ hashFiles('vcpkg.json','vcpkg-lock.json') }}
          restore-keys: |
            vcpkg-${{ runner.os }}-${{ env.VCPKG_TARGET_TRIPLET }}-

      - name: Bootstrap vcpkg
        run: |
          if [ ! -d "${{ runner.temp }}/vcpkg" ]; then
            git clone https://github.com/microsoft/vcpkg.git "${{ runner.temp }}/vcpkg"
          fi
          "${{ runner.temp }}/vcpkg/bootstrap-vcpkg.sh" -disableMetrics

      - name: Update vcpkg ports
        run: |
          cd "${{ runner.temp }}/vcpkg"
          git pull

      - name: Set VCPKG env vars
        shell: bash
        run: |
          echo "VCPKG_ROOT=${RUNNER_TEMP}/vcpkg" >> $GITHUB_ENV
          echo "VCPKG_TOOLCHAIN_FILE=${RUNNER_TEMP}/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV
          echo "VCPKG_TARGET_TRIPLET=x64-linux-dynamic" >> $GITHUB_ENV
  
          PREFIX_PATH=${RUNNER_TEMP}/vcpkg/installed/x64-linux-dynamic
  
          echo "CMAKE_PREFIX_PATH=${PREFIX_PATH}:${PREFIX_PATH}/share/ffmpeg" >> $GITHUB_ENV
      
      - name: Install C++ deps via vcpkg (retry on 429)
        run: |
          for i in 1 2 3; do
            "${{ runner.temp }}/vcpkg/vcpkg" install spdlog fmt ffmpeg[avcodec,avdevice,avfilter,avformat,core,swresample,swscale,x264,x265] --triplet x64-linux-dynamic --recurse && break || sleep 30
          done

      - name: Save vcpkg cache
        if: always()
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.temp }}/vcpkg
            ${{ runner.temp }}/vcpkg/installed
            ${{ runner.temp }}/vcpkg/archives
          key: vcpkg-${{ runner.os }}-${{ env.VCPKG_TARGET_TRIPLET }}-${{ hashFiles('vcpkg.json','vcpkg-lock.json') }}
          restore-keys: |
            vcpkg-${{ runner.os }}-${{ env.VCPKG_TARGET_TRIPLET }}-

      - name: Set PYTHON_LOCATION env
        run: echo "PYTHON_LOCATION=${{ env.pythonLocation }}" >> $GITHUB_ENV

      - name: Build Linux wheel
        env:
          SKBUILD_CONFIG: Release
          VCPKG_ROOT: ${{ runner.temp }}/vcpkg
          VCPKG_TOOLCHAIN_FILE: ${{ runner.temp }}/vcpkg/scripts/buildsystems/vcpkg.cmake
          VCPKG_TARGET_TRIPLET: x64-linux-dynamic
          CMAKE_ARGS: >-
            -G Ninja
            -DCMAKE_TOOLCHAIN_FILE=${{ runner.temp }}/vcpkg/scripts/buildsystems/vcpkg.cmake
            -DVCPKG_TARGET_TRIPLET=x64-linux-dynamic
            -DCMAKE_PREFIX_PATH=${{ runner.temp }}/vcpkg/installed/x64-linux-dynamic
            -DCMAKE_MODULE_PATH=${{ runner.temp }}/vcpkg/installed/x64-linux-dynamic/share/ffmpeg
        run: python -m pip wheel . --no-deps -w dist -v

      - name: Smoke-test wheel in current env
        shell: bash
        run: |
          # reinstall into the same env (torch is already present)
          python -m pip install --upgrade --force-reinstall dist/*.whl

          # quick import check
          python -c "import torch, celux; print(f'torch {torch.__version__}, celux {celux.__version__}')"

      - name: List dist folder
        run: ls -l dist

      - name: Upload Linux wheel
        uses: actions/upload-artifact@v4
        with:
          name: linux-wheel-Release
          path: '**/dist/*.whl'


  release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Windows wheels
        uses: actions/download-artifact@v4
        with:
          name: windows-wheel-Release
          path: dist

      - name: Download Linux wheels
        uses: actions/download-artifact@v4
        with:
          name: linux-wheel-Release
          path: dist

      - name: List all files for debug
        run: ls -lR dist

      - name: Install tomllib (if needed)
        run: python3 -m pip install toml 

      - name: Extract version from pyproject.toml
        id: get_version
        shell: bash
        run: |
          VERSION=$(python3 -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create tag for this version
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git tag v${{ env.VERSION }}
          git push origin v${{ env.VERSION }}

      - name: Flatten wheel artifacts to top-level dist/
        run: |
          find dist -name '*.whl' -exec mv {} dist/ \;

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag:   v${{ env.VERSION }}
          name:  Release v${{ env.VERSION }}
          body:  Automated CI build & wheel
          artifacts: 'dist/*.whl'

  pypi-publish:
    needs: release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Download Wheels
        uses: actions/download-artifact@v4
        with:
          name: linux-wheel-Release
          path: dist
      - name: Download Windows Wheels
        uses: actions/download-artifact@v4
        with:
          name: windows-wheel-Release
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          skip_existing: true
          packages_dir: dist/dist
